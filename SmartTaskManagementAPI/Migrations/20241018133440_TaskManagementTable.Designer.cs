// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartTaskManagementAPI.Data;

#nullable disable

namespace SmartTaskManagementAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241018133440_TaskManagementTable")]
    partial class TaskManagementTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartTaskManagementAPI.TaskCategory.model.TaskCategory", b =>
                {
                    b.Property<long>("TaskCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TaskCategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            TaskCategoryId = 100L,
                            Description = "",
                            Name = "Work"
                        });
                });

            modelBuilder.Entity("SmartTaskManagementAPI.TaskManagement.model.TaskManagement", b =>
                {
                    b.Property<long?>("TaskCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskCategoryId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskCategoryId = 100L,
                            Description = "Complete the quarterly financial report",
                            DueDate = new DateTime(2024, 10, 18, 16, 34, 39, 744, DateTimeKind.Local).AddTicks(9864),
                            Priority = "Low",
                            Status = "Completed",
                            TaskId = new Guid("4db9015d-fbdd-4f5b-8617-3d314cb79ddc"),
                            Title = "Submit report"
                        });
                });

            modelBuilder.Entity("SmartTaskManagementAPI.TaskManagement.model.TaskManagement", b =>
                {
                    b.HasOne("SmartTaskManagementAPI.TaskCategory.model.TaskCategory", "TaskCategory")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCategory");
                });

            modelBuilder.Entity("SmartTaskManagementAPI.TaskCategory.model.TaskCategory", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
